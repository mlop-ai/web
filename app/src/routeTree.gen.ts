/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as OnboardIndexImport } from './routes/onboard/index'
import { Route as OIndexImport } from './routes/o/index'
import { Route as OnboardInvitesImport } from './routes/onboard/invites'
import { Route as AuthVerifyEmailImport } from './routes/auth/verify-email'
import { Route as AuthSignUpImport } from './routes/auth/sign-up'
import { Route as AuthSignInImport } from './routes/auth/sign-in'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as indexApiKeysImport } from './routes/(index)/api-keys'
import { Route as indexAuthedImport } from './routes/(index)/_authed'
import { Route as OnboardUserIndexImport } from './routes/onboard/user/index'
import { Route as OnboardOrgIndexImport } from './routes/onboard/org/index'
import { Route as OOrgSlugAuthedImport } from './routes/o.$orgSlug._authed'
import { Route as indexAuthedSettingsIndexImport } from './routes/(index)/_authed.settings/index'
import { Route as OOrgSlugAuthedSettingsIndexImport } from './routes/o.$orgSlug._authed/settings/index'
import { Route as OOrgSlugAuthedProjectsIndexImport } from './routes/o.$orgSlug._authed/projects/index'
import { Route as OOrgSlugAuthedindexIndexImport } from './routes/o.$orgSlug._authed/(index)/index'
import { Route as indexAuthedSettingsAccountIndexImport } from './routes/(index)/_authed.settings/account/index'
import { Route as indexAuthedSettingsAccountPreferencesImport } from './routes/(index)/_authed.settings/account/preferences'
import { Route as OOrgSlugAuthedSettingsOrgIndexImport } from './routes/o.$orgSlug._authed/settings/org/index'
import { Route as OOrgSlugAuthedSettingsAccountIndexImport } from './routes/o.$orgSlug._authed/settings/account/index'
import { Route as OOrgSlugAuthedSettingsOrgMembersImport } from './routes/o.$orgSlug._authed/settings/org/members'
import { Route as OOrgSlugAuthedSettingsOrgDevelopersImport } from './routes/o.$orgSlug._authed/settings/org/developers'
import { Route as OOrgSlugAuthedSettingsOrgBillingImport } from './routes/o.$orgSlug._authed/settings/org/billing'
import { Route as OOrgSlugAuthedSettingsAccountPreferencesImport } from './routes/o.$orgSlug._authed/settings/account/preferences'
import { Route as OOrgSlugAuthedrunComparisonProjectsProjectNameIndexImport } from './routes/o.$orgSlug._authed/(runComparison)/projects.$projectName/index'
import { Route as OOrgSlugAuthedrunComparisonProjectsProjectNameTableImport } from './routes/o.$orgSlug._authed/(runComparison)/projects.$projectName/table'
import { Route as OOrgSlugAuthedrunProjectsProjectNameRunIdIndexImport } from './routes/o.$orgSlug._authed/(run)/projects.$projectName.$runId/index'
import { Route as OOrgSlugAuthedrunProjectsProjectNameRunIdSystemImport } from './routes/o.$orgSlug._authed/(run)/projects.$projectName.$runId/system'
import { Route as OOrgSlugAuthedrunProjectsProjectNameRunIdLogsImport } from './routes/o.$orgSlug._authed/(run)/projects.$projectName.$runId/logs'
import { Route as OOrgSlugAuthedrunProjectsProjectNameRunIdGraphImport } from './routes/o.$orgSlug._authed/(run)/projects.$projectName.$runId/graph'
import { Route as OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexImport } from './routes/o.$orgSlug._authed/(run)/projects.$projectName.$runId/summary/index'

// Create Virtual Routes

const indexImport = createFileRoute('/(index)')()
const OOrgSlugImport = createFileRoute('/o/$orgSlug')()

// Create/Update Routes

const indexRoute = indexImport.update({
  id: '/(index)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OOrgSlugRoute = OOrgSlugImport.update({
  id: '/o/$orgSlug',
  path: '/o/$orgSlug',
  getParentRoute: () => rootRoute,
} as any)

const OnboardIndexRoute = OnboardIndexImport.update({
  id: '/onboard/',
  path: '/onboard/',
  getParentRoute: () => rootRoute,
} as any)

const OIndexRoute = OIndexImport.update({
  id: '/o/',
  path: '/o/',
  getParentRoute: () => rootRoute,
} as any)

const OnboardInvitesRoute = OnboardInvitesImport.update({
  id: '/onboard/invites',
  path: '/onboard/invites',
  getParentRoute: () => rootRoute,
} as any)

const AuthVerifyEmailRoute = AuthVerifyEmailImport.update({
  id: '/auth/verify-email',
  path: '/auth/verify-email',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignInRoute = AuthSignInImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/auth/forgot-password',
  path: '/auth/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const indexApiKeysRoute = indexApiKeysImport.update({
  id: '/api-keys',
  path: '/api-keys',
  getParentRoute: () => indexRoute,
} as any)

const indexAuthedRoute = indexAuthedImport.update({
  id: '/_authed',
  getParentRoute: () => indexRoute,
} as any)

const OnboardUserIndexRoute = OnboardUserIndexImport.update({
  id: '/onboard/user/',
  path: '/onboard/user/',
  getParentRoute: () => rootRoute,
} as any)

const OnboardOrgIndexRoute = OnboardOrgIndexImport.update({
  id: '/onboard/org/',
  path: '/onboard/org/',
  getParentRoute: () => rootRoute,
} as any)

const OOrgSlugAuthedRoute = OOrgSlugAuthedImport.update({
  id: '/_authed',
  getParentRoute: () => OOrgSlugRoute,
} as any)

const indexAuthedSettingsIndexRoute = indexAuthedSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => indexAuthedRoute,
} as any)

const OOrgSlugAuthedSettingsIndexRoute =
  OOrgSlugAuthedSettingsIndexImport.update({
    id: '/settings/',
    path: '/settings/',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedProjectsIndexRoute =
  OOrgSlugAuthedProjectsIndexImport.update({
    id: '/projects/',
    path: '/projects/',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedindexIndexRoute = OOrgSlugAuthedindexIndexImport.update({
  id: '/(index)/',
  path: '/',
  getParentRoute: () => OOrgSlugAuthedRoute,
} as any)

const indexAuthedSettingsAccountIndexRoute =
  indexAuthedSettingsAccountIndexImport.update({
    id: '/settings/account/',
    path: '/settings/account/',
    getParentRoute: () => indexAuthedRoute,
  } as any)

const indexAuthedSettingsAccountPreferencesRoute =
  indexAuthedSettingsAccountPreferencesImport.update({
    id: '/settings/account/preferences',
    path: '/settings/account/preferences',
    getParentRoute: () => indexAuthedRoute,
  } as any)

const OOrgSlugAuthedSettingsOrgIndexRoute =
  OOrgSlugAuthedSettingsOrgIndexImport.update({
    id: '/settings/org/',
    path: '/settings/org/',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedSettingsAccountIndexRoute =
  OOrgSlugAuthedSettingsAccountIndexImport.update({
    id: '/settings/account/',
    path: '/settings/account/',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedSettingsOrgMembersRoute =
  OOrgSlugAuthedSettingsOrgMembersImport.update({
    id: '/settings/org/members',
    path: '/settings/org/members',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedSettingsOrgDevelopersRoute =
  OOrgSlugAuthedSettingsOrgDevelopersImport.update({
    id: '/settings/org/developers',
    path: '/settings/org/developers',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedSettingsOrgBillingRoute =
  OOrgSlugAuthedSettingsOrgBillingImport.update({
    id: '/settings/org/billing',
    path: '/settings/org/billing',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedSettingsAccountPreferencesRoute =
  OOrgSlugAuthedSettingsAccountPreferencesImport.update({
    id: '/settings/account/preferences',
    path: '/settings/account/preferences',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedrunComparisonProjectsProjectNameIndexRoute =
  OOrgSlugAuthedrunComparisonProjectsProjectNameIndexImport.update({
    id: '/(runComparison)/projects/$projectName/',
    path: '/projects/$projectName/',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedrunComparisonProjectsProjectNameTableRoute =
  OOrgSlugAuthedrunComparisonProjectsProjectNameTableImport.update({
    id: '/(runComparison)/projects/$projectName/table',
    path: '/projects/$projectName/table',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedrunProjectsProjectNameRunIdIndexRoute =
  OOrgSlugAuthedrunProjectsProjectNameRunIdIndexImport.update({
    id: '/(run)/projects/$projectName/$runId/',
    path: '/projects/$projectName/$runId/',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedrunProjectsProjectNameRunIdSystemRoute =
  OOrgSlugAuthedrunProjectsProjectNameRunIdSystemImport.update({
    id: '/(run)/projects/$projectName/$runId/system',
    path: '/projects/$projectName/$runId/system',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedrunProjectsProjectNameRunIdLogsRoute =
  OOrgSlugAuthedrunProjectsProjectNameRunIdLogsImport.update({
    id: '/(run)/projects/$projectName/$runId/logs',
    path: '/projects/$projectName/$runId/logs',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedrunProjectsProjectNameRunIdGraphRoute =
  OOrgSlugAuthedrunProjectsProjectNameRunIdGraphImport.update({
    id: '/(run)/projects/$projectName/$runId/graph',
    path: '/projects/$projectName/$runId/graph',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

const OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexRoute =
  OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexImport.update({
    id: '/(run)/projects/$projectName/$runId/summary/',
    path: '/projects/$projectName/$runId/summary/',
    getParentRoute: () => OOrgSlugAuthedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(index)': {
      id: '/(index)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexImport
      parentRoute: typeof rootRoute
    }
    '/(index)/_authed': {
      id: '/(index)/_authed'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof indexAuthedImport
      parentRoute: typeof indexRoute
    }
    '/(index)/api-keys': {
      id: '/(index)/api-keys'
      path: '/api-keys'
      fullPath: '/api-keys'
      preLoaderRoute: typeof indexApiKeysImport
      parentRoute: typeof indexImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof rootRoute
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInImport
      parentRoute: typeof rootRoute
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof rootRoute
    }
    '/auth/verify-email': {
      id: '/auth/verify-email'
      path: '/auth/verify-email'
      fullPath: '/auth/verify-email'
      preLoaderRoute: typeof AuthVerifyEmailImport
      parentRoute: typeof rootRoute
    }
    '/onboard/invites': {
      id: '/onboard/invites'
      path: '/onboard/invites'
      fullPath: '/onboard/invites'
      preLoaderRoute: typeof OnboardInvitesImport
      parentRoute: typeof rootRoute
    }
    '/o/': {
      id: '/o/'
      path: '/o'
      fullPath: '/o'
      preLoaderRoute: typeof OIndexImport
      parentRoute: typeof rootRoute
    }
    '/onboard/': {
      id: '/onboard/'
      path: '/onboard'
      fullPath: '/onboard'
      preLoaderRoute: typeof OnboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/o/$orgSlug': {
      id: '/o/$orgSlug'
      path: '/o/$orgSlug'
      fullPath: '/o/$orgSlug'
      preLoaderRoute: typeof OOrgSlugImport
      parentRoute: typeof rootRoute
    }
    '/o/$orgSlug/_authed': {
      id: '/o/$orgSlug/_authed'
      path: '/o/$orgSlug'
      fullPath: '/o/$orgSlug'
      preLoaderRoute: typeof OOrgSlugAuthedImport
      parentRoute: typeof OOrgSlugRoute
    }
    '/onboard/org/': {
      id: '/onboard/org/'
      path: '/onboard/org'
      fullPath: '/onboard/org'
      preLoaderRoute: typeof OnboardOrgIndexImport
      parentRoute: typeof rootRoute
    }
    '/onboard/user/': {
      id: '/onboard/user/'
      path: '/onboard/user'
      fullPath: '/onboard/user'
      preLoaderRoute: typeof OnboardUserIndexImport
      parentRoute: typeof rootRoute
    }
    '/(index)/_authed/settings/': {
      id: '/(index)/_authed/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof indexAuthedSettingsIndexImport
      parentRoute: typeof indexAuthedImport
    }
    '/(index)/_authed/settings/account/preferences': {
      id: '/(index)/_authed/settings/account/preferences'
      path: '/settings/account/preferences'
      fullPath: '/settings/account/preferences'
      preLoaderRoute: typeof indexAuthedSettingsAccountPreferencesImport
      parentRoute: typeof indexAuthedImport
    }
    '/(index)/_authed/settings/account/': {
      id: '/(index)/_authed/settings/account/'
      path: '/settings/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof indexAuthedSettingsAccountIndexImport
      parentRoute: typeof indexAuthedImport
    }
    '/o/$orgSlug/_authed/(index)/': {
      id: '/o/$orgSlug/_authed/(index)/'
      path: '/'
      fullPath: '/o/$orgSlug/'
      preLoaderRoute: typeof OOrgSlugAuthedindexIndexImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/projects/': {
      id: '/o/$orgSlug/_authed/projects/'
      path: '/projects'
      fullPath: '/o/$orgSlug/projects'
      preLoaderRoute: typeof OOrgSlugAuthedProjectsIndexImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/settings/': {
      id: '/o/$orgSlug/_authed/settings/'
      path: '/settings'
      fullPath: '/o/$orgSlug/settings'
      preLoaderRoute: typeof OOrgSlugAuthedSettingsIndexImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/settings/account/preferences': {
      id: '/o/$orgSlug/_authed/settings/account/preferences'
      path: '/settings/account/preferences'
      fullPath: '/o/$orgSlug/settings/account/preferences'
      preLoaderRoute: typeof OOrgSlugAuthedSettingsAccountPreferencesImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/settings/org/billing': {
      id: '/o/$orgSlug/_authed/settings/org/billing'
      path: '/settings/org/billing'
      fullPath: '/o/$orgSlug/settings/org/billing'
      preLoaderRoute: typeof OOrgSlugAuthedSettingsOrgBillingImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/settings/org/developers': {
      id: '/o/$orgSlug/_authed/settings/org/developers'
      path: '/settings/org/developers'
      fullPath: '/o/$orgSlug/settings/org/developers'
      preLoaderRoute: typeof OOrgSlugAuthedSettingsOrgDevelopersImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/settings/org/members': {
      id: '/o/$orgSlug/_authed/settings/org/members'
      path: '/settings/org/members'
      fullPath: '/o/$orgSlug/settings/org/members'
      preLoaderRoute: typeof OOrgSlugAuthedSettingsOrgMembersImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/settings/account/': {
      id: '/o/$orgSlug/_authed/settings/account/'
      path: '/settings/account'
      fullPath: '/o/$orgSlug/settings/account'
      preLoaderRoute: typeof OOrgSlugAuthedSettingsAccountIndexImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/settings/org/': {
      id: '/o/$orgSlug/_authed/settings/org/'
      path: '/settings/org'
      fullPath: '/o/$orgSlug/settings/org'
      preLoaderRoute: typeof OOrgSlugAuthedSettingsOrgIndexImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/(runComparison)/projects/$projectName/table': {
      id: '/o/$orgSlug/_authed/(runComparison)/projects/$projectName/table'
      path: '/projects/$projectName/table'
      fullPath: '/o/$orgSlug/projects/$projectName/table'
      preLoaderRoute: typeof OOrgSlugAuthedrunComparisonProjectsProjectNameTableImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/(runComparison)/projects/$projectName/': {
      id: '/o/$orgSlug/_authed/(runComparison)/projects/$projectName/'
      path: '/projects/$projectName'
      fullPath: '/o/$orgSlug/projects/$projectName'
      preLoaderRoute: typeof OOrgSlugAuthedrunComparisonProjectsProjectNameIndexImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/graph': {
      id: '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/graph'
      path: '/projects/$projectName/$runId/graph'
      fullPath: '/o/$orgSlug/projects/$projectName/$runId/graph'
      preLoaderRoute: typeof OOrgSlugAuthedrunProjectsProjectNameRunIdGraphImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/logs': {
      id: '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/logs'
      path: '/projects/$projectName/$runId/logs'
      fullPath: '/o/$orgSlug/projects/$projectName/$runId/logs'
      preLoaderRoute: typeof OOrgSlugAuthedrunProjectsProjectNameRunIdLogsImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/system': {
      id: '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/system'
      path: '/projects/$projectName/$runId/system'
      fullPath: '/o/$orgSlug/projects/$projectName/$runId/system'
      preLoaderRoute: typeof OOrgSlugAuthedrunProjectsProjectNameRunIdSystemImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/': {
      id: '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/'
      path: '/projects/$projectName/$runId'
      fullPath: '/o/$orgSlug/projects/$projectName/$runId'
      preLoaderRoute: typeof OOrgSlugAuthedrunProjectsProjectNameRunIdIndexImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
    '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/summary/': {
      id: '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/summary/'
      path: '/projects/$projectName/$runId/summary'
      fullPath: '/o/$orgSlug/projects/$projectName/$runId/summary'
      preLoaderRoute: typeof OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexImport
      parentRoute: typeof OOrgSlugAuthedImport
    }
  }
}

// Create and export the route tree

interface indexAuthedRouteChildren {
  indexAuthedSettingsIndexRoute: typeof indexAuthedSettingsIndexRoute
  indexAuthedSettingsAccountPreferencesRoute: typeof indexAuthedSettingsAccountPreferencesRoute
  indexAuthedSettingsAccountIndexRoute: typeof indexAuthedSettingsAccountIndexRoute
}

const indexAuthedRouteChildren: indexAuthedRouteChildren = {
  indexAuthedSettingsIndexRoute: indexAuthedSettingsIndexRoute,
  indexAuthedSettingsAccountPreferencesRoute:
    indexAuthedSettingsAccountPreferencesRoute,
  indexAuthedSettingsAccountIndexRoute: indexAuthedSettingsAccountIndexRoute,
}

const indexAuthedRouteWithChildren = indexAuthedRoute._addFileChildren(
  indexAuthedRouteChildren,
)

interface indexRouteChildren {
  indexAuthedRoute: typeof indexAuthedRouteWithChildren
  indexApiKeysRoute: typeof indexApiKeysRoute
}

const indexRouteChildren: indexRouteChildren = {
  indexAuthedRoute: indexAuthedRouteWithChildren,
  indexApiKeysRoute: indexApiKeysRoute,
}

const indexRouteWithChildren = indexRoute._addFileChildren(indexRouteChildren)

interface OOrgSlugAuthedRouteChildren {
  OOrgSlugAuthedindexIndexRoute: typeof OOrgSlugAuthedindexIndexRoute
  OOrgSlugAuthedProjectsIndexRoute: typeof OOrgSlugAuthedProjectsIndexRoute
  OOrgSlugAuthedSettingsIndexRoute: typeof OOrgSlugAuthedSettingsIndexRoute
  OOrgSlugAuthedSettingsAccountPreferencesRoute: typeof OOrgSlugAuthedSettingsAccountPreferencesRoute
  OOrgSlugAuthedSettingsOrgBillingRoute: typeof OOrgSlugAuthedSettingsOrgBillingRoute
  OOrgSlugAuthedSettingsOrgDevelopersRoute: typeof OOrgSlugAuthedSettingsOrgDevelopersRoute
  OOrgSlugAuthedSettingsOrgMembersRoute: typeof OOrgSlugAuthedSettingsOrgMembersRoute
  OOrgSlugAuthedSettingsAccountIndexRoute: typeof OOrgSlugAuthedSettingsAccountIndexRoute
  OOrgSlugAuthedSettingsOrgIndexRoute: typeof OOrgSlugAuthedSettingsOrgIndexRoute
  OOrgSlugAuthedrunComparisonProjectsProjectNameTableRoute: typeof OOrgSlugAuthedrunComparisonProjectsProjectNameTableRoute
  OOrgSlugAuthedrunComparisonProjectsProjectNameIndexRoute: typeof OOrgSlugAuthedrunComparisonProjectsProjectNameIndexRoute
  OOrgSlugAuthedrunProjectsProjectNameRunIdGraphRoute: typeof OOrgSlugAuthedrunProjectsProjectNameRunIdGraphRoute
  OOrgSlugAuthedrunProjectsProjectNameRunIdLogsRoute: typeof OOrgSlugAuthedrunProjectsProjectNameRunIdLogsRoute
  OOrgSlugAuthedrunProjectsProjectNameRunIdSystemRoute: typeof OOrgSlugAuthedrunProjectsProjectNameRunIdSystemRoute
  OOrgSlugAuthedrunProjectsProjectNameRunIdIndexRoute: typeof OOrgSlugAuthedrunProjectsProjectNameRunIdIndexRoute
  OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexRoute: typeof OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexRoute
}

const OOrgSlugAuthedRouteChildren: OOrgSlugAuthedRouteChildren = {
  OOrgSlugAuthedindexIndexRoute: OOrgSlugAuthedindexIndexRoute,
  OOrgSlugAuthedProjectsIndexRoute: OOrgSlugAuthedProjectsIndexRoute,
  OOrgSlugAuthedSettingsIndexRoute: OOrgSlugAuthedSettingsIndexRoute,
  OOrgSlugAuthedSettingsAccountPreferencesRoute:
    OOrgSlugAuthedSettingsAccountPreferencesRoute,
  OOrgSlugAuthedSettingsOrgBillingRoute: OOrgSlugAuthedSettingsOrgBillingRoute,
  OOrgSlugAuthedSettingsOrgDevelopersRoute:
    OOrgSlugAuthedSettingsOrgDevelopersRoute,
  OOrgSlugAuthedSettingsOrgMembersRoute: OOrgSlugAuthedSettingsOrgMembersRoute,
  OOrgSlugAuthedSettingsAccountIndexRoute:
    OOrgSlugAuthedSettingsAccountIndexRoute,
  OOrgSlugAuthedSettingsOrgIndexRoute: OOrgSlugAuthedSettingsOrgIndexRoute,
  OOrgSlugAuthedrunComparisonProjectsProjectNameTableRoute:
    OOrgSlugAuthedrunComparisonProjectsProjectNameTableRoute,
  OOrgSlugAuthedrunComparisonProjectsProjectNameIndexRoute:
    OOrgSlugAuthedrunComparisonProjectsProjectNameIndexRoute,
  OOrgSlugAuthedrunProjectsProjectNameRunIdGraphRoute:
    OOrgSlugAuthedrunProjectsProjectNameRunIdGraphRoute,
  OOrgSlugAuthedrunProjectsProjectNameRunIdLogsRoute:
    OOrgSlugAuthedrunProjectsProjectNameRunIdLogsRoute,
  OOrgSlugAuthedrunProjectsProjectNameRunIdSystemRoute:
    OOrgSlugAuthedrunProjectsProjectNameRunIdSystemRoute,
  OOrgSlugAuthedrunProjectsProjectNameRunIdIndexRoute:
    OOrgSlugAuthedrunProjectsProjectNameRunIdIndexRoute,
  OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexRoute:
    OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexRoute,
}

const OOrgSlugAuthedRouteWithChildren = OOrgSlugAuthedRoute._addFileChildren(
  OOrgSlugAuthedRouteChildren,
)

interface OOrgSlugRouteChildren {
  OOrgSlugAuthedRoute: typeof OOrgSlugAuthedRouteWithChildren
}

const OOrgSlugRouteChildren: OOrgSlugRouteChildren = {
  OOrgSlugAuthedRoute: OOrgSlugAuthedRouteWithChildren,
}

const OOrgSlugRouteWithChildren = OOrgSlugRoute._addFileChildren(
  OOrgSlugRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof indexAuthedRouteWithChildren
  '/api-keys': typeof indexApiKeysRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/onboard/invites': typeof OnboardInvitesRoute
  '/o': typeof OIndexRoute
  '/onboard': typeof OnboardIndexRoute
  '/o/$orgSlug': typeof OOrgSlugAuthedRouteWithChildren
  '/onboard/org': typeof OnboardOrgIndexRoute
  '/onboard/user': typeof OnboardUserIndexRoute
  '/settings': typeof indexAuthedSettingsIndexRoute
  '/settings/account/preferences': typeof indexAuthedSettingsAccountPreferencesRoute
  '/settings/account': typeof indexAuthedSettingsAccountIndexRoute
  '/o/$orgSlug/': typeof OOrgSlugAuthedindexIndexRoute
  '/o/$orgSlug/projects': typeof OOrgSlugAuthedProjectsIndexRoute
  '/o/$orgSlug/settings': typeof OOrgSlugAuthedSettingsIndexRoute
  '/o/$orgSlug/settings/account/preferences': typeof OOrgSlugAuthedSettingsAccountPreferencesRoute
  '/o/$orgSlug/settings/org/billing': typeof OOrgSlugAuthedSettingsOrgBillingRoute
  '/o/$orgSlug/settings/org/developers': typeof OOrgSlugAuthedSettingsOrgDevelopersRoute
  '/o/$orgSlug/settings/org/members': typeof OOrgSlugAuthedSettingsOrgMembersRoute
  '/o/$orgSlug/settings/account': typeof OOrgSlugAuthedSettingsAccountIndexRoute
  '/o/$orgSlug/settings/org': typeof OOrgSlugAuthedSettingsOrgIndexRoute
  '/o/$orgSlug/projects/$projectName/table': typeof OOrgSlugAuthedrunComparisonProjectsProjectNameTableRoute
  '/o/$orgSlug/projects/$projectName': typeof OOrgSlugAuthedrunComparisonProjectsProjectNameIndexRoute
  '/o/$orgSlug/projects/$projectName/$runId/graph': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdGraphRoute
  '/o/$orgSlug/projects/$projectName/$runId/logs': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdLogsRoute
  '/o/$orgSlug/projects/$projectName/$runId/system': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdSystemRoute
  '/o/$orgSlug/projects/$projectName/$runId': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdIndexRoute
  '/o/$orgSlug/projects/$projectName/$runId/summary': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof indexAuthedRouteWithChildren
  '/api-keys': typeof indexApiKeysRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/onboard/invites': typeof OnboardInvitesRoute
  '/o': typeof OIndexRoute
  '/onboard': typeof OnboardIndexRoute
  '/o/$orgSlug': typeof OOrgSlugAuthedindexIndexRoute
  '/onboard/org': typeof OnboardOrgIndexRoute
  '/onboard/user': typeof OnboardUserIndexRoute
  '/settings': typeof indexAuthedSettingsIndexRoute
  '/settings/account/preferences': typeof indexAuthedSettingsAccountPreferencesRoute
  '/settings/account': typeof indexAuthedSettingsAccountIndexRoute
  '/o/$orgSlug/projects': typeof OOrgSlugAuthedProjectsIndexRoute
  '/o/$orgSlug/settings': typeof OOrgSlugAuthedSettingsIndexRoute
  '/o/$orgSlug/settings/account/preferences': typeof OOrgSlugAuthedSettingsAccountPreferencesRoute
  '/o/$orgSlug/settings/org/billing': typeof OOrgSlugAuthedSettingsOrgBillingRoute
  '/o/$orgSlug/settings/org/developers': typeof OOrgSlugAuthedSettingsOrgDevelopersRoute
  '/o/$orgSlug/settings/org/members': typeof OOrgSlugAuthedSettingsOrgMembersRoute
  '/o/$orgSlug/settings/account': typeof OOrgSlugAuthedSettingsAccountIndexRoute
  '/o/$orgSlug/settings/org': typeof OOrgSlugAuthedSettingsOrgIndexRoute
  '/o/$orgSlug/projects/$projectName/table': typeof OOrgSlugAuthedrunComparisonProjectsProjectNameTableRoute
  '/o/$orgSlug/projects/$projectName': typeof OOrgSlugAuthedrunComparisonProjectsProjectNameIndexRoute
  '/o/$orgSlug/projects/$projectName/$runId/graph': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdGraphRoute
  '/o/$orgSlug/projects/$projectName/$runId/logs': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdLogsRoute
  '/o/$orgSlug/projects/$projectName/$runId/system': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdSystemRoute
  '/o/$orgSlug/projects/$projectName/$runId': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdIndexRoute
  '/o/$orgSlug/projects/$projectName/$runId/summary': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(index)': typeof indexRouteWithChildren
  '/(index)/_authed': typeof indexAuthedRouteWithChildren
  '/(index)/api-keys': typeof indexApiKeysRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/auth/verify-email': typeof AuthVerifyEmailRoute
  '/onboard/invites': typeof OnboardInvitesRoute
  '/o/': typeof OIndexRoute
  '/onboard/': typeof OnboardIndexRoute
  '/o/$orgSlug': typeof OOrgSlugRouteWithChildren
  '/o/$orgSlug/_authed': typeof OOrgSlugAuthedRouteWithChildren
  '/onboard/org/': typeof OnboardOrgIndexRoute
  '/onboard/user/': typeof OnboardUserIndexRoute
  '/(index)/_authed/settings/': typeof indexAuthedSettingsIndexRoute
  '/(index)/_authed/settings/account/preferences': typeof indexAuthedSettingsAccountPreferencesRoute
  '/(index)/_authed/settings/account/': typeof indexAuthedSettingsAccountIndexRoute
  '/o/$orgSlug/_authed/(index)/': typeof OOrgSlugAuthedindexIndexRoute
  '/o/$orgSlug/_authed/projects/': typeof OOrgSlugAuthedProjectsIndexRoute
  '/o/$orgSlug/_authed/settings/': typeof OOrgSlugAuthedSettingsIndexRoute
  '/o/$orgSlug/_authed/settings/account/preferences': typeof OOrgSlugAuthedSettingsAccountPreferencesRoute
  '/o/$orgSlug/_authed/settings/org/billing': typeof OOrgSlugAuthedSettingsOrgBillingRoute
  '/o/$orgSlug/_authed/settings/org/developers': typeof OOrgSlugAuthedSettingsOrgDevelopersRoute
  '/o/$orgSlug/_authed/settings/org/members': typeof OOrgSlugAuthedSettingsOrgMembersRoute
  '/o/$orgSlug/_authed/settings/account/': typeof OOrgSlugAuthedSettingsAccountIndexRoute
  '/o/$orgSlug/_authed/settings/org/': typeof OOrgSlugAuthedSettingsOrgIndexRoute
  '/o/$orgSlug/_authed/(runComparison)/projects/$projectName/table': typeof OOrgSlugAuthedrunComparisonProjectsProjectNameTableRoute
  '/o/$orgSlug/_authed/(runComparison)/projects/$projectName/': typeof OOrgSlugAuthedrunComparisonProjectsProjectNameIndexRoute
  '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/graph': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdGraphRoute
  '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/logs': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdLogsRoute
  '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/system': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdSystemRoute
  '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdIndexRoute
  '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/summary/': typeof OOrgSlugAuthedrunProjectsProjectNameRunIdSummaryIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api-keys'
    | '/auth/forgot-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/auth/verify-email'
    | '/onboard/invites'
    | '/o'
    | '/onboard'
    | '/o/$orgSlug'
    | '/onboard/org'
    | '/onboard/user'
    | '/settings'
    | '/settings/account/preferences'
    | '/settings/account'
    | '/o/$orgSlug/'
    | '/o/$orgSlug/projects'
    | '/o/$orgSlug/settings'
    | '/o/$orgSlug/settings/account/preferences'
    | '/o/$orgSlug/settings/org/billing'
    | '/o/$orgSlug/settings/org/developers'
    | '/o/$orgSlug/settings/org/members'
    | '/o/$orgSlug/settings/account'
    | '/o/$orgSlug/settings/org'
    | '/o/$orgSlug/projects/$projectName/table'
    | '/o/$orgSlug/projects/$projectName'
    | '/o/$orgSlug/projects/$projectName/$runId/graph'
    | '/o/$orgSlug/projects/$projectName/$runId/logs'
    | '/o/$orgSlug/projects/$projectName/$runId/system'
    | '/o/$orgSlug/projects/$projectName/$runId'
    | '/o/$orgSlug/projects/$projectName/$runId/summary'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api-keys'
    | '/auth/forgot-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/auth/verify-email'
    | '/onboard/invites'
    | '/o'
    | '/onboard'
    | '/o/$orgSlug'
    | '/onboard/org'
    | '/onboard/user'
    | '/settings'
    | '/settings/account/preferences'
    | '/settings/account'
    | '/o/$orgSlug/projects'
    | '/o/$orgSlug/settings'
    | '/o/$orgSlug/settings/account/preferences'
    | '/o/$orgSlug/settings/org/billing'
    | '/o/$orgSlug/settings/org/developers'
    | '/o/$orgSlug/settings/org/members'
    | '/o/$orgSlug/settings/account'
    | '/o/$orgSlug/settings/org'
    | '/o/$orgSlug/projects/$projectName/table'
    | '/o/$orgSlug/projects/$projectName'
    | '/o/$orgSlug/projects/$projectName/$runId/graph'
    | '/o/$orgSlug/projects/$projectName/$runId/logs'
    | '/o/$orgSlug/projects/$projectName/$runId/system'
    | '/o/$orgSlug/projects/$projectName/$runId'
    | '/o/$orgSlug/projects/$projectName/$runId/summary'
  id:
    | '__root__'
    | '/'
    | '/(index)'
    | '/(index)/_authed'
    | '/(index)/api-keys'
    | '/auth/forgot-password'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/auth/verify-email'
    | '/onboard/invites'
    | '/o/'
    | '/onboard/'
    | '/o/$orgSlug'
    | '/o/$orgSlug/_authed'
    | '/onboard/org/'
    | '/onboard/user/'
    | '/(index)/_authed/settings/'
    | '/(index)/_authed/settings/account/preferences'
    | '/(index)/_authed/settings/account/'
    | '/o/$orgSlug/_authed/(index)/'
    | '/o/$orgSlug/_authed/projects/'
    | '/o/$orgSlug/_authed/settings/'
    | '/o/$orgSlug/_authed/settings/account/preferences'
    | '/o/$orgSlug/_authed/settings/org/billing'
    | '/o/$orgSlug/_authed/settings/org/developers'
    | '/o/$orgSlug/_authed/settings/org/members'
    | '/o/$orgSlug/_authed/settings/account/'
    | '/o/$orgSlug/_authed/settings/org/'
    | '/o/$orgSlug/_authed/(runComparison)/projects/$projectName/table'
    | '/o/$orgSlug/_authed/(runComparison)/projects/$projectName/'
    | '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/graph'
    | '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/logs'
    | '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/system'
    | '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/'
    | '/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/summary/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  indexRoute: typeof indexRouteWithChildren
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
  AuthVerifyEmailRoute: typeof AuthVerifyEmailRoute
  OnboardInvitesRoute: typeof OnboardInvitesRoute
  OIndexRoute: typeof OIndexRoute
  OnboardIndexRoute: typeof OnboardIndexRoute
  OOrgSlugRoute: typeof OOrgSlugRouteWithChildren
  OnboardOrgIndexRoute: typeof OnboardOrgIndexRoute
  OnboardUserIndexRoute: typeof OnboardUserIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  indexRoute: indexRouteWithChildren,
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
  AuthVerifyEmailRoute: AuthVerifyEmailRoute,
  OnboardInvitesRoute: OnboardInvitesRoute,
  OIndexRoute: OIndexRoute,
  OnboardIndexRoute: OnboardIndexRoute,
  OOrgSlugRoute: OOrgSlugRouteWithChildren,
  OnboardOrgIndexRoute: OnboardOrgIndexRoute,
  OnboardUserIndexRoute: OnboardUserIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(index)",
        "/auth/forgot-password",
        "/auth/sign-in",
        "/auth/sign-up",
        "/auth/verify-email",
        "/onboard/invites",
        "/o/",
        "/onboard/",
        "/o/$orgSlug",
        "/onboard/org/",
        "/onboard/user/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(index)": {
      "filePath": "(index)",
      "children": [
        "/(index)/_authed",
        "/(index)/api-keys"
      ]
    },
    "/(index)/_authed": {
      "filePath": "(index)/_authed.tsx",
      "parent": "/(index)",
      "children": [
        "/(index)/_authed/settings/",
        "/(index)/_authed/settings/account/preferences",
        "/(index)/_authed/settings/account/"
      ]
    },
    "/(index)/api-keys": {
      "filePath": "(index)/api-keys.tsx",
      "parent": "/(index)"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx"
    },
    "/auth/sign-in": {
      "filePath": "auth/sign-in.tsx"
    },
    "/auth/sign-up": {
      "filePath": "auth/sign-up.tsx"
    },
    "/auth/verify-email": {
      "filePath": "auth/verify-email.tsx"
    },
    "/onboard/invites": {
      "filePath": "onboard/invites.tsx"
    },
    "/o/": {
      "filePath": "o/index.tsx"
    },
    "/onboard/": {
      "filePath": "onboard/index.tsx"
    },
    "/o/$orgSlug": {
      "filePath": "/",
      "children": [
        "/o/$orgSlug/_authed"
      ]
    },
    "/o/$orgSlug/_authed": {
      "filePath": "o.$orgSlug._authed.tsx",
      "parent": "/o/$orgSlug",
      "children": [
        "/o/$orgSlug/_authed/(index)/",
        "/o/$orgSlug/_authed/projects/",
        "/o/$orgSlug/_authed/settings/",
        "/o/$orgSlug/_authed/settings/account/preferences",
        "/o/$orgSlug/_authed/settings/org/billing",
        "/o/$orgSlug/_authed/settings/org/developers",
        "/o/$orgSlug/_authed/settings/org/members",
        "/o/$orgSlug/_authed/settings/account/",
        "/o/$orgSlug/_authed/settings/org/",
        "/o/$orgSlug/_authed/(runComparison)/projects/$projectName/table",
        "/o/$orgSlug/_authed/(runComparison)/projects/$projectName/",
        "/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/graph",
        "/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/logs",
        "/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/system",
        "/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/",
        "/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/summary/"
      ]
    },
    "/onboard/org/": {
      "filePath": "onboard/org/index.tsx"
    },
    "/onboard/user/": {
      "filePath": "onboard/user/index.tsx"
    },
    "/(index)/_authed/settings/": {
      "filePath": "(index)/_authed.settings/index.tsx",
      "parent": "/(index)/_authed"
    },
    "/(index)/_authed/settings/account/preferences": {
      "filePath": "(index)/_authed.settings/account/preferences.tsx",
      "parent": "/(index)/_authed"
    },
    "/(index)/_authed/settings/account/": {
      "filePath": "(index)/_authed.settings/account/index.tsx",
      "parent": "/(index)/_authed"
    },
    "/o/$orgSlug/_authed/(index)/": {
      "filePath": "o.$orgSlug._authed/(index)/index.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/projects/": {
      "filePath": "o.$orgSlug._authed/projects/index.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/settings/": {
      "filePath": "o.$orgSlug._authed/settings/index.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/settings/account/preferences": {
      "filePath": "o.$orgSlug._authed/settings/account/preferences.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/settings/org/billing": {
      "filePath": "o.$orgSlug._authed/settings/org/billing.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/settings/org/developers": {
      "filePath": "o.$orgSlug._authed/settings/org/developers.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/settings/org/members": {
      "filePath": "o.$orgSlug._authed/settings/org/members.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/settings/account/": {
      "filePath": "o.$orgSlug._authed/settings/account/index.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/settings/org/": {
      "filePath": "o.$orgSlug._authed/settings/org/index.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/(runComparison)/projects/$projectName/table": {
      "filePath": "o.$orgSlug._authed/(runComparison)/projects.$projectName/table.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/(runComparison)/projects/$projectName/": {
      "filePath": "o.$orgSlug._authed/(runComparison)/projects.$projectName/index.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/graph": {
      "filePath": "o.$orgSlug._authed/(run)/projects.$projectName.$runId/graph.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/logs": {
      "filePath": "o.$orgSlug._authed/(run)/projects.$projectName.$runId/logs.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/system": {
      "filePath": "o.$orgSlug._authed/(run)/projects.$projectName.$runId/system.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/": {
      "filePath": "o.$orgSlug._authed/(run)/projects.$projectName.$runId/index.tsx",
      "parent": "/o/$orgSlug/_authed"
    },
    "/o/$orgSlug/_authed/(run)/projects/$projectName/$runId/summary/": {
      "filePath": "o.$orgSlug._authed/(run)/projects.$projectName.$runId/summary/index.tsx",
      "parent": "/o/$orgSlug/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
